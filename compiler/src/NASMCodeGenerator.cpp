#include "R-Sharp/NASMCodeGenerator.hpp"
#include "R-Sharp/Logging.hpp"
#include "R-Sharp/AstNodes.hpp"

NASMCodeGenerator::NASMCodeGenerator(std::shared_ptr<AstNode> root){
    this->root = root;
}

void NASMCodeGenerator::indent(){
    indentLevel++;
}
void NASMCodeGenerator::dedent(){
    if (!indentLevel){
        Error("Indentation error");
        return;
    }
    indentLevel--;
}
void NASMCodeGenerator::emit(std::string const& str){
    source += str;
}
void NASMCodeGenerator::emitIndented(std::string const& str){
    for (int i=0;i<indentLevel;i++){
        source += "    ";
    }
    source += str;
}

std::string NASMCodeGenerator::generate(){
    source = "";
    indentLevel = 0;
    root->accept(this);
    return source;
}

void NASMCodeGenerator::emitSyscall(Syscall callNr, std::string const& arg1, std::string const& arg2, std::string const& arg3, std::string const& arg4, std::string const& arg5, std::string const& arg6){
    // move the arguments to rdi, rsi, rdx, r10, r8, and r9 respectively
    emitIndented("; Syscall " + std::to_string(callNr) + "(" + std::to_string(static_cast<int>(callNr)) + ")\n");
    if (arg1 != "") emitIndented("mov rdi, " + arg1 + "\n");
    if (arg2 != "") emitIndented("mov rsi, " + arg2 + "\n");
    if (arg3 != "") emitIndented("mov rdx, " + arg3 + "\n");
    if (arg4 != "") emitIndented("mov r10, " + arg4 + "\n");
    if (arg5 != "") emitIndented("mov r8, " + arg5 + "\n");
    if (arg6 != "") emitIndented("mov r9, " + arg6 + "\n");

    emitIndented("mov rax, " + std::to_string(static_cast<int>(callNr)) + "\n");

    emitIndented("syscall\n");
}

// program
void NASMCodeGenerator::visit(AstProgram* node){
    emit("; NASM code generated by R-Sharp compiler");
    emit("\n\nBITS 64\n");
    emit("global _start\n");
    emit("section .text\n");
    for (auto const& child : node->getChildren()){
        if (child->getType() == AstNodeType::AstFunction){
            child->accept(this);
        }
        else{
            Error("NASM Generator: Only functions are implemented!");
        }
    }
    emit("_start:\n");
    indent();
    emit("call main\n");
    emitSyscall(Syscall::exit, "rax");
    dedent();
}

// definitions
void NASMCodeGenerator::visit(AstFunction* node){
    emit("; Function " + node->name + "\n");
    emit("\n");
    emit("global " + node->name + "\n");
    emit(node->name + ":\n");
    indent();
    for (auto const& child : node->getChildren()){
        child->accept(this);
    }
    dedent();
}


// statements
void NASMCodeGenerator::visit(AstReturn* node){
    node->value->accept(this);
    emitIndented("ret\n");
}


// expressions
void NASMCodeGenerator::visit(AstUnary* node){
    node->value->accept(this);
    switch (node->type){
        case AstUnaryType::Negate:
            emitIndented("neg rax\n");
            break;
        case AstUnaryType::BinaryNot:
            emitIndented("not rax\n");
            break;
        case AstUnaryType::LogicalNot:
            emitIndented("cmp rax, 0\n");
            emitIndented("mov rax, 0\n");
            emitIndented("sete al\n");
        default:
            Error("NASM Generator: Unary operator not implemented!");
    }
}
void NASMCodeGenerator::visit(AstInteger* node){
    emitIndented("mov rax, " + std::to_string(node->value) + "\n");
}