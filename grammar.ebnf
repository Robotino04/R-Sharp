program = {functionDefinition};

functionDefinition = tags, identifier, "(", [parameterList], ")", ":", type, statement;

return = 'return', optionalExpression, ";";

for = 'for', "(", optionalExpression, ";", optionalExpression, ";", optionalExpression, ")", statement
    | 'for', "(", variableDeclaration, ";", optionalExpression, ";", optionalExpression, ")", statement;
do = 'do', statement, 'while', "(", expression, ")", ";";
while = 'while', "(", expression, ")", statement;
break = 'break', ";";
skip = 'skip', ";";

optionalExpression = [expression];

statement = return
          | variableDeclaration
          | (optionalExpression, ";")
          | ("{", {statement}, "}")
          | for
          | do
          | while
          | break
          | skip
          | if;

functionCall = identifier, "(", [expression, {",", expression}], ")";

possible_tag_values = "extern";
tags = [ "[", possible_tag_values, {",", possible_tag_values}, "]", ];

if = 'if', "(", expression, ")", statement, {elif}, [else];
elif = 'elif', "(", expression, ")", statement;
else = 'else', statement;


expression = assignment | conditionalExp;
conditionalExp = logicalOrExp, ["?", expression ":" expression];
logicalOrExp = logicalAndExp, {"||", logicalAndExp};
logicalAndExp = equalityExp, {"&&", equalityExp};
equalityExp = relationalExp, {("==" | "!="), relationalExp};
relationalExp = additiveExp, {("<" | ">" | "<=" | ">="), additiveExp};
additiveExp = term, {("+" | "-"), term};
term = factor, {("*" | "/" | "%"), factor};
factor = ("(", expression, ")") | number | (("-" | "~" | "!"), factor) | lvalue | functionCall;

lvalue = identifier | dereference;
dereference = '*', factor;

type = "i8" | "i16" | "i32" | "i64" | "c_void" | pointer;
pointer = '*', type;

parameterList = identifier, ":", type {",", identifier, ":", type };

variableDeclaration = identifier, ":", type, ["=", expression] ";";
assignment = lvalue, "=", expression;

identifier = ("_" | letter), {"_" | letter | digit};