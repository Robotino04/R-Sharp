program = {function | functionDeclaration};

function = identifier, "(", [parameterList], ")", ":", type, statement;
functionDeclaration = identifier, "(", [parameterList], ")", ":", type, ";";
blockItem = declaration | statement;

return = 'return', expression, ";";

for = 'for', "(", optionalExpression, ";", optionalExpression, ";", optionalExpression, ")", statement
    | 'for', "(", declaration, ";", optionalExpression, ";", optionalExpression, ")", statement;
do = 'do', statement, 'while', "(", expression, ")", ";";
while = 'while', "(", expression, ")", statement;
break = 'break', ";";
skip = 'skip', ";";

optionalExpression = [expression];

statement = return
          | declaration
          | (optionalExpression, ";")
          | ("{", {blockItem}, "}")
          | for
          | do
          | while
          | break
          | skip
          | if;

functionCall = identifier, "(", [expression, {",", expression}], ")";

if = 'if', "(", expression, ")", statement, {elif}, [else];
elif = 'elif', "(", expression, ")", statement;
else = 'else', statement;


expression = assignment | conditionalExp;
conditionalExp = logicalOrExp, ["?", expression ":" expression];
logicalOrExp = logicalAndExp, {"||", logicalAndExp};
logicalAndExp = equalityExp, {"&&", equalityExp};
equalityExp = relationalExp, {("==" | "!="), relationalExp};
relationalExp = additiveExp, {("<" | ">" | "<=" | ">="), additiveExp};
additiveExp = term, {("+" | "-"), term};
term = factor, {("*" | "/" | "%"), factor};
factor = ("(", expression, ")") | number | (("-" | "~" | "!"), factor) | identifier | functionCall;

type = 'i64' | 'i32' | 'char';

parameterList = identifier ":" type {"," variable};

declaration = identifier ":" type ["=" expression] ";";
assignment = identifier "=" expression;

identifier = "_" | letter, {letter | digit};
letter = "";