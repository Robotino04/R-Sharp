program = {functionDefinition | importStatement};

functionDefinition = tags, identifier, "(", [parameterList], ")", ":", type, statement;
importStatement = '*' | (identifier, {',', identifier}), '@', identifier, {"::", identifier}, ';';

return = 'return', optionalExpression, ";";

for = 'for', "(", optionalExpression, ";", optionalExpression, ";", optionalExpression, ")", statement
    | 'for', "(", variableDeclaration, ";", optionalExpression, ";", optionalExpression, ")", statement;
do = 'do', statement, 'while', "(", expression, ")", ";";
while = 'while', "(", expression, ")", statement;
break = 'break', ";";
skip = 'skip', ";";

optionalExpression = [expression];

statement = return
          | variableDeclaration
          | (optionalExpression, ";")
          | ("{", {statement}, "}")
          | for
          | do
          | while
          | break
          | skip
          | if;


possible_tag_values = "extern";
tags = [ "[", possible_tag_values, {",", possible_tag_values}, "]", ];

if = 'if', "(", expression, ")", statement, {elif}, [else];
elif = 'elif', "(", expression, ")", statement;
else = 'else', statement;

expression = assignment | conditionalExp;
assignment = prefixExp, "=", expression;
conditionalExp = logicalOrExp, ["?", expression ":" expression];
logicalOrExp = logicalAndExp, {"||", logicalAndExp};
logicalAndExp = equalityExp, {"&&", equalityExp};
equalityExp = relationalExp, {("==" | "!="), relationalExp};
relationalExp = additiveExp, {("<" | ">" | "<=" | ">="), additiveExp};
additiveExp = multiplicativeExp, {("+" | "-"), multiplicativeExp};
multiplicativeExp = prefixExp, {("*" | "/" | "%"), prefixExp};
prefixExp = {"-" | "~" | "!" | "$" | "*"}, postfixExp;
postfixExp =  (primaryExp, { '[', expression, ']' }) | functionCall;
primaryExp = "(", expression, ")" | character_literal | number | identifier;


functionCall = identifier, "(", [expression, {",", expression}], ")";
character_literal = ''', character, ''';

type = "i8" | "i16" | "i32" | "i64" | "c_void" | pointer | unsized_array | sized_array;
pointer = '*', type;
sized_array = '[', type, ',', number, ']';
unsized_array = '[', type, ']';

parameterList = identifier, ":", type {",", identifier, ":", type };

variableDeclaration = identifier, ":", type, ["=", expression] ";";

identifier = ("_" | letter), {"_" | letter | digit};